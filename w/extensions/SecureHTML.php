<?php

/*****************************************************************************
Secure HTML Extension - by Ryan Finnie <ryan@finnie.org>
MediaWiki 1.5 and above

Installation:
  * Place SecureHTML.php in extensions/ under the MediaWiki tree.
  * Place SpecialSecureHTMLInput.php in includes/.
  * Add one or more keys to LocalSettings.php:
    $shtml_keys = array(
      'primary key' => 'Place a secret key string here',
      'another key' => 'some other secret key string'
    );
  * Add this to LocalSettings.php: include("extensions/SecureHTML.php");
  * Go to Special:SecureHTMLInput on the wiki to sign an HTML block.

Usage: <shtml hash="0123456789abcdef0123456789abcdef"
            [ keyname="key name" ] >HTML</shtml>

Options:
  hash - The hash generated by SecureHTMLInput.
  keyname - One of the keys specified in the $shtml_keys array.  If no
    keyname is specified, the first key in the array is used.
  HTML - The HTML you wish to display.

*****************************************************************************/

$wgExtensionFunctions[] = "wfSecureHTMLExtension";

$wgExtensionCredits['parserhook'][] = array(
  'name' => 'Secure HTML',
  'author' => 'Ryan Finnie',
  'url' => 'http://www.mediawiki.org/wiki/Extension:Secure_HTML',
  'description' => 'Lets you include arbitrary HTML in an authorized and secure way',
);

$wgExtensionCredits['specialpage'][] = array(
  'name' => 'Secure HTML',
  'author' => 'Ryan Finnie',
  'url' => 'http://www.mediawiki.org/wiki/Extension:Secure_HTML',
  'description' => 'Lets you include arbitrary HTML in an authorized and secure way',
);

function wfSecureHTMLExtension() {
    global $wgParser;
    global $wgMessageCache;

    $wgParser->setHook( "shtml", "renderSecureHTML" );

    require_once('includes/SpecialPage.php');
    $wgMessageCache->addMessages(array('securehtmlinput' => 'Secure HTML Input'));
    SpecialPage::addPage( new SpecialPage( 'SecureHTMLInput' ) );
}

function renderSecureHTML( $input, $argv ) {
  global $shtml_keys;
  $keykeys = array_keys($shtml_keys);
  $keyname = ($argv['keyname'] ? $argv['keyname'] : $keykeys[0]);
  $key = $shtml_keys[$keyname];
  $testhash = $argv['hash'];
  $hash = md5($key . $input);
  if($hash == $testhash) {
    $output = $input;
  } else {
    $output = '<b><i>Error: invalid hash</i></b>' . "\n";
  }

  return $output;
}
?>
