<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Person', 'doctrine');

/**
 * BasePerson
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $username
 * @property string $password
 * @property string $email
 * @property string $mobile_phone
 * @property integer $avatar_id
 * @property string $url
 * @property string $city
 * @property string $postal_code
 * @property string $timezone
 * @property string $feedback
 * @property string $about_me
 * @property string $twitter
 * @property integer $payment_method_id
 * @property integer $chat_setting
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property Doctrine_Collection $DreamfishGroup
 * @property Doctrine_Collection $LanguagePerson
 * @property Doctrine_Collection $ProjectPerson
 * @property Doctrine_Collection $SkillPerson
 * @property Doctrine_Collection $ValuePerson
 * @property Doctrine_Collection $Wallpost
 * @property Doctrine_Collection $WorkshopPerson
 * @property Doctrine_Collection $WorkstoryPerson
 * 
 * @method integer             getId()                Returns the current record's "id" value
 * @method string              getName()              Returns the current record's "name" value
 * @method string              getUsername()          Returns the current record's "username" value
 * @method string              getPassword()          Returns the current record's "password" value
 * @method string              getEmail()             Returns the current record's "email" value
 * @method string              getMobilePhone()       Returns the current record's "mobile_phone" value
 * @method integer             getAvatarId()          Returns the current record's "avatar_id" value
 * @method string              getUrl()               Returns the current record's "url" value
 * @method string              getCity()              Returns the current record's "city" value
 * @method string              getPostalCode()        Returns the current record's "postal_code" value
 * @method string              getTimezone()          Returns the current record's "timezone" value
 * @method string              getFeedback()          Returns the current record's "feedback" value
 * @method string              getAboutMe()           Returns the current record's "about_me" value
 * @method string              getTwitter()           Returns the current record's "twitter" value
 * @method integer             getPaymentMethodId()   Returns the current record's "payment_method_id" value
 * @method integer             getChatSetting()       Returns the current record's "chat_setting" value
 * @method timestamp           getCreatedAt()         Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()         Returns the current record's "updated_at" value
 * @method Doctrine_Collection getDreamfishGroup()    Returns the current record's "DreamfishGroup" collection
 * @method Doctrine_Collection getLanguagePerson()    Returns the current record's "LanguagePerson" collection
 * @method Doctrine_Collection getProjectPerson()     Returns the current record's "ProjectPerson" collection
 * @method Doctrine_Collection getSkillPerson()       Returns the current record's "SkillPerson" collection
 * @method Doctrine_Collection getValuePerson()       Returns the current record's "ValuePerson" collection
 * @method Doctrine_Collection getWallpost()          Returns the current record's "Wallpost" collection
 * @method Doctrine_Collection getWorkshopPerson()    Returns the current record's "WorkshopPerson" collection
 * @method Doctrine_Collection getWorkstoryPerson()   Returns the current record's "WorkstoryPerson" collection
 * @method Person              setId()                Sets the current record's "id" value
 * @method Person              setName()              Sets the current record's "name" value
 * @method Person              setUsername()          Sets the current record's "username" value
 * @method Person              setPassword()          Sets the current record's "password" value
 * @method Person              setEmail()             Sets the current record's "email" value
 * @method Person              setMobilePhone()       Sets the current record's "mobile_phone" value
 * @method Person              setAvatarId()          Sets the current record's "avatar_id" value
 * @method Person              setUrl()               Sets the current record's "url" value
 * @method Person              setCity()              Sets the current record's "city" value
 * @method Person              setPostalCode()        Sets the current record's "postal_code" value
 * @method Person              setTimezone()          Sets the current record's "timezone" value
 * @method Person              setFeedback()          Sets the current record's "feedback" value
 * @method Person              setAboutMe()           Sets the current record's "about_me" value
 * @method Person              setTwitter()           Sets the current record's "twitter" value
 * @method Person              setPaymentMethodId()   Sets the current record's "payment_method_id" value
 * @method Person              setChatSetting()       Sets the current record's "chat_setting" value
 * @method Person              setCreatedAt()         Sets the current record's "created_at" value
 * @method Person              setUpdatedAt()         Sets the current record's "updated_at" value
 * @method Person              setDreamfishGroup()    Sets the current record's "DreamfishGroup" collection
 * @method Person              setLanguagePerson()    Sets the current record's "LanguagePerson" collection
 * @method Person              setProjectPerson()     Sets the current record's "ProjectPerson" collection
 * @method Person              setSkillPerson()       Sets the current record's "SkillPerson" collection
 * @method Person              setValuePerson()       Sets the current record's "ValuePerson" collection
 * @method Person              setWallpost()          Sets the current record's "Wallpost" collection
 * @method Person              setWorkshopPerson()    Sets the current record's "WorkshopPerson" collection
 * @method Person              setWorkstoryPerson()   Sets the current record's "WorkstoryPerson" collection
 * 
 * @package    dfmarketplace
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BasePerson extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('person');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => '8',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '255',
             ));
        $this->hasColumn('username', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '255',
             ));
        $this->hasColumn('password', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '255',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '255',
             ));
        $this->hasColumn('mobile_phone', 'string', 31, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '31',
             ));
        $this->hasColumn('avatar_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '8',
             ));
        $this->hasColumn('url', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '255',
             ));
        $this->hasColumn('city', 'string', 63, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '63',
             ));
        $this->hasColumn('postal_code', 'string', 15, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '15',
             ));
        $this->hasColumn('timezone', 'string', 15, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '15',
             ));
        $this->hasColumn('feedback', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('about_me', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('twitter', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '255',
             ));
        $this->hasColumn('payment_method_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '8',
             ));
        $this->hasColumn('chat_setting', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => '1',
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '25',
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '25',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('DreamfishGroup', array(
             'local' => 'id',
             'foreign' => 'contact_id'));

        $this->hasMany('LanguagePerson', array(
             'local' => 'id',
             'foreign' => 'person_id'));

        $this->hasMany('ProjectPerson', array(
             'local' => 'id',
             'foreign' => 'person_id'));

        $this->hasMany('SkillPerson', array(
             'local' => 'id',
             'foreign' => 'person_id'));

        $this->hasMany('ValuePerson', array(
             'local' => 'id',
             'foreign' => 'person_id'));

        $this->hasMany('Wallpost', array(
             'local' => 'id',
             'foreign' => 'person_id'));

        $this->hasMany('WorkshopPerson', array(
             'local' => 'id',
             'foreign' => 'person_id'));

        $this->hasMany('WorkstoryPerson', array(
             'local' => 'id',
             'foreign' => 'person_id'));
    }
}